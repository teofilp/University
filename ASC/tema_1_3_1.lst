     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 0A                          a db 10
    14 00000001 0F                          b db 15
    15 00000002 14                          c db 20
    16 00000003 6400                        d dw 100
    17 00000005 <res 00000004>              result resw 2
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          
    23 00000000 A0[00000000]                    mov al, [a] ; al <- a
    24 00000005 B102                            mov cl, byte 2 ; cl <- 2
    25 00000007 F6E1                            mul cl ; ax <- al * cl <=> ax <- a*2
    26                                          
    27 00000009 668B1D[03000000]                mov bx, [d] ; bx <- d
    28                                          
    29 00000010 6629C3                          sub bx, ax ; bx <- bx - ax <=> bx <- d - 2*a
    30                                          
    31 00000013 6689D8                          mov ax, bx ; ax <- bx <=> ax <- d - 2*a
    32 00000016 66BB0500                        mov bx, word 5 ; bx <- 5
    33                                          
    34 0000001A 66F7E3                          mul bx ; dx:ax <- ax * bx <=> eax <- 5*(d - 2*a)
    35                                          
    36 0000001D 6652                            push dx
    37 0000001F 6650                            push ax
    38 00000021 58                              pop eax
    39                                          
    40 00000022 83E801                          sub eax, dword 1 ; eax <- eax - 1 <=> eax <- 5*(d - 2*a) - 1
    41 00000025 F7D8                            neg eax ; eax <- -eax <=> eax <- -(5*(d - 2*a) - 1)
    42                                          
    43 00000027 052C010000                      add eax, dword 300 ; eax <- eax + 300 <=> eax <- 300 - (5*(d - 2*a) - 1)
    44 0000002C A3[05000000]                    mov [result], eax
    45                                  
    46 00000031 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    47 00000033 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
